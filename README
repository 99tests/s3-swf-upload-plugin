S3SwfUpload
===========

S3SwfUpload allow user uploading a file to S3 directly, so you can save the cost of uploading process in your app server.

Install
=======

This fork is designed to allow you to use this plugin as a gem in rails 3.

Example
=======

There will hopefully be an example app live at some point. Just not right now.

Usage
=======

1. Edit Gemfile and add this as a gem, you'll also need aws-s3

	gem 's3_swf_upload', :git => 'git://github.com/nathancolgate/s3-swf-upload-plugin'
	gem 'aws-s3', :require => 'aws/s3'
	
2. Bundle it!

	$ bundle install

3. Run the generator

	$ rails generate s3_swf_upload:uploader
	
4. Configure your amazon parameters via the amazon_s3.yml file.

5. Generate the bucket (if you haven't already)

	$ rake s3_swf_upload:make_bucket
	
6. Upload the crossdomain.xml file (if you haven't already)

	$ rake s3_swf_upload:make_crossdomain

7. Edit app/controller/s3_uploads_controller.rb

   You need to skip any authentication for this controller, the flash
   needs to be able to access it.  There's a big comment showing you
   where to do this :) 

8. init s3_swf object:

  <%= s3_swf_upload_tag %>

9. When you click upload, your file will be upload to http://bucket.s3.amazonasw.com/ by default.

   IE the default prefix is '' (no prefix)

10. If you want to customise its behavior, here's a more complex example:

<%=raw s3_swf_upload_tag(:width => 500, 
      :height => 200, 
      :success => 'alert("success");',
      :failed => 'alert("failed");',
      :selected => 'alert("selected");',
      :prefix => 'prefix_in_bucket',
      :initialMessage => 'Press this button to find the file to upload',
      :upload => 'Press Here To Activate Upload',
      :do_checks => '0') 
%>

  In this case, files will be uploaded to http://bucket.s3.amazonasw.com/prefix_in_bucket/filename

11. If you need to check that the file they have selected is
   legitimate, before it gets uploaded, (for example, to make sure
   they aren't overwriting a file of the same name your database
   knows is already uploaded):

   i) Supply a method s3_swf_upload_error? in your application.rb to
      check, like this:

   def s3_swf_upload_file_error?(filename)
     Mod.find_by_zip_name(File::basename(filename)) ?
     "Sorry, there is already a mod with that zip file name!" :
     nil
   end

      Note that this method must return nil if there no error.

   ii) Set the option

     :do_checks => '1'

      in the s3_swf_upload_tag

