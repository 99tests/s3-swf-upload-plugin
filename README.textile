h1. S3SwfUpload Gem For Rails 3

S3SwfUpload allows user to upload a file to S3 directly, so you can save the cost of uploading process in your app server.

The flex application in this fork was completely re-written so that there are no flash or flex UI components.  The one exception to that is the browse button, which, for security purposes MUST be flash. But even then, you get to pass the URLs for images to use for that button!

The goal of this re-write is to put the power to customize this powerful took back in the hands of non-flex-savvy developers.  The look and feel is controlled by CSS, and any behavior is controlled by JavaScript.  Flex only handles the file management portion.  A nice result of this is that the flash file is only 46 kb, down from 288 kb.  If you see any way that this can be done better, please don't hesitate to let me know!

h2. Installation

This fork is designed to allow you to use this plugin as a gem in rails 3, so just follow the usage steps below.

h2. Example

I'll try to get a example running on heroku ASAP.

h2. Usage

1. Edit <code>Gemfile</code> and add this as a gem, you'll also need aws-s3

<pre><code>gem 's3_swf_upload', :git => 'git://github.com/nathancolgate/s3-swf-upload-plugin'
gem 'aws-s3', :require => 'aws/s3'
</code></pre>
	
2. Bundle it!

<pre><code>$ bundle install
</code></pre>

3. Run the generator

<pre><code>$ rails generate s3_swf_upload:uploader
</code></pre>
	
4. Configure your amazon parameters via the generated <code>config/amazon_s3.yml</code> file.

5. Generate the bucket (if you haven't already)

<pre><code>$ rake s3_swf_upload:make_bucket
</code></pre>
	
6. Upload the crossdomain.xml file (if you haven't already)

<pre><code>$ rake s3_swf_upload:make_crossdomain
</code></pre>

7. Edit <code>app/controller/s3_uploads_controller.rb</code>

You need to skip any authentication for this controller, the flash needs to be able to access it.  There's a big comment showing you where to do this :) 

8. Initialize the SWF object in your view using this handy helper:

<pre><code><%= s3_swf_upload_tag %>
</code></pre>

9. To achieve basic functionality, the only other thing you need is something to call the <code>startUploading</code> function.  For example:

<pre><code><input type="submit" value="Start Uploading" onclick="s3_swf_1_object.startUploading();" />
</code></pre>

However, you will have no feedback or interface to let you know that anything is actually happening.

10. If you want to customise its behavior, here's a more complex example: http://gist.github.com/382979

h2. General Parameters

h3. :buttonWidth (integer = 100)

h3. :buttonHeight (integer = 30)

h3. :flashVersion (string = '9.0.0')

h3. :queueSizeLimit (integer = 100)

Maximum number of files that can be added to the queue.

h3. :fileSizeLimit (integer = 524288000)

Individual file size limit in bytes (default is 512 MB)

h3. :fileTypes (string = '*.*')

Something like this also works: <code>'*.jpg;*.gif;*.png;'</code>

h3. :fileTypeDescs (string = 'All Files')

Something like this also works: <code>'Image files.'</code>

h3. :selectMultipleFiles (boolean = true)

Set this to false if you only want to allow users to pick one file at a time.

h3. :keyPrefix (string = '')

String to be prepended to the uploaded file name to make the Amazon S3 key (location in bucket).

h3. :signaturePath (string = '/s3_uploads.xml')

Fully qualified path to the controller and action that will serve up the Amazon S3 signature

h3. :buttonUpPath (string = '/flash/s3_up_button.gif')

Fully qualified path to an image to be used as the Browse Button (in the up state).  Image should have same dimensions as the buttonWidth and buttonHeight parameters.

h3. :buttonOverPath (string = '/flash/s3_over_button.gif')

Fully qualified path to an image to be used as the Browse Button (in the over state).  Image should have same dimensions as the buttonWidth and buttonHeight parameters.

h3. :buttonDownPath (string = '/flash/s3_down_button.gif')

Fully qualified path to an image to be used as the Browse Button (in the down state).  Image should have same dimensions as the buttonWidth and buttonHeight parameters.

h2. Callback Parameters

The real power of this refactoring is that the flex application makes all of the following calls to JavaScript.  What you do with the calls is totally up to you:

* :onFileAdd (file)
* :onFileRemove function(file)
* :onFileSizeLimitReached function(file)
* :onFileNotInQueue function(file)
* :onQueueChange function(queue)
* :onQueueSizeLimitReached function(queue)
* :onQueueEmpty function(queue)
* :onQueueClear function(queue)
* :onUploadingStart function()
* :onUploadingStop function()
* :onUploadingFinish function()
* :onSignatureOpen function(file,event)
* :onSignatureProgress function(file,progress_event)
* :onSignatureSecurityError function(file,security_error_event)
* :onSignatureComplete function(file,event)
* :onSignatureIOError function(file,io_error_event)
* :onSignatureHttpStatus function(file,http_status_event)
* :onSignatureXMLError function(file,error_message)
* :onUploadError function(upload_options,error)
* :onUploadOpen function(upload_options,event)
* :onUploadProgress function(upload_options,progress_event)
* :onUploadIOError function(upload_options,io_error_event)
* :onUploadHttpStatus function(upload_options,http_status_event)
* :onUploadSecurityError function(upload_options,security_error_event)
* :onUploadComplete function(upload_options,event)

h2. JavaScript Functions

The following functions can be called on the generated object.  Normally the call looks something like this:

<pre><code>s3_swf_1_object.startUploading();
</code></pre>

h3. startUploading

Starts the uploading process

h3. stopUploading

Stops the uploading process.  Note: Stopping and restarting the uploading process is buggy.  I'd avoid it.

h3. clearQueue

Clears all files out of the queue.

h3. removeFileFromQueue(integer)

Removes a specific file from the queue.

h2. Kudos

Original plugin is Copyright (c) 2008 elctech, released under the MIT license

Updates to plugin for multiple file uploader are Copyright (c) 2010 PRX, released under the MIT license

Conversion of plugin to gem for rails 3 is Copyright (c) 2010 Nathan Colgate Clark, released under the MIT license

Stripping the flex application of UI and adding callbacks Copyright (c) 2010 Nathan Colgate Clark, released under the MIT license

